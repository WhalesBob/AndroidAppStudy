## 안드로이드 스튜디오 파악하기(Start Date : 2022.03.10) ##
(마지막으로 본 곳 : https://developer.android.com/training/basics/firstapp/starting-activity?hl=ko)

*맨 처음에 파악해야 할 4가지 
  app/java/com.example.[project_name]/MainActivity 
    - 기본 활동으로, 앱의 진입점이다. 앱을 빌드하고 실행하면 시스템에서 이 Activity의 인스턴스를 실행하고, 레이아웃을 로드한다. 
  
  app/res/layout/activity_main.xml
    - 이 XML 파일은 활동의 사용자 인터페이스(UI) 레이아웃을 정의한다. 이 파일에는 "Hello, World!"라는 텍스트가 있는 "TextView" 요소가 포함되어 있다.
    
  app/manifests/AndroidManifest.xml
    - 메니페스트 파일은 앱의 기본 특성을 설명하고, 앱의 각 구성요소를 정의하는 XML 파일이다. 
    
  Gradle Scripts/build.gradle
    - 이 이름을 가진 파일은 두개이다. 하나는 프로젝트용으로 "Project: [project_name]" 이고, 다른 하나는 앱 모듈용으로 "Module: [project_name]" 이다.
      각 모듈에는 자체 "build.gradle" 파일이 있지만, 현재 이 프로젝트에는 하나의 모듈만 존재하는 상태이다. 각 모듈의 "build.gradle" 파일을 사용하여 
      Gradle plugin에서 앱을 빌드하는 방법을 제어한다. 
      
      
* 간단한 사용자 인터페이스 빌드
 - Android Studio Layout Editor를 사용하여 텍스트 상자와 버튼이 포함된 레이아웃을 만들어 본다. 
 
  -> 안드로이드 앱의 UI는 레이아웃 및 위젯 이라는 계층 구조로 빌드된다. 레이아웃은 "ViewGroup" 객체로, 화면에서 하위 뷰의 위치 지정 방식을
     제어하는 컨테이너이다. 위젯은 "View" 객체로, 버튼 및 텍스트 상자와 같은 UI 구성 요소이다. 
     
  -> 안드로이드는 ViewGroup 및 View 클래스를 위한 XML 용어를 제공하므로, UI 대부분이 XML 파일에 정의된다. 하지만, 이 과정에서
     Layout Editor는, 개발자가 뷰를 드래그 앤 드롭하여 레이아웃을 만들 때 XML를 대신 작성해 주는 모양이다.
     
  ** Component Tree 패널은 레이아웃의 뷰 계층 구조를 보여준다. 
  -> ConstraintLayout 은 동위 뷰와 상위 요소 레이아웃의 제약 조건에 따라 각 뷰의 위치를 정의하는 레이아웃이다. 이러한 방식으로, 플랫 뷰 계층 구조를
     사용하여 간단한 레이아웃과 복잡한 레이아웃 모두 만들 수 있다. 이 레이아웃 유형은 중첩된 레이아웃이 필요하지 않다. 

(번외) (안드로이드에서) dp란 무엇인가?
    ** dp를 하기전, 픽셀이란, 화소라고도 하며 디지털 이미지를 나타내는데 사용되는 최소 단위이다.
       해상도와도 관련이 있는데, 동일한 이미지라 하더라도 픽셀의 수가 많은 것이 해상도가 더 높다. 
       ppi(pixel per inch) -> 1인치당 픽셀 수를 의미한다. dpi(dot per inch)라고도 하는데, dot이 곧 pixel이다.
       
    ** 안드로이드에서 어플리케이션에 이미지를 넣을 때, 픽셀 단위로 이미지를 넣게 되면 문제가 생긴다 
       사용자의 스마트폰 화면은 다 제각각이다. 따라서 같은 이미지라 하더라도 화면의 크기에 따라서 이미지가 크게 보일수도,
       작게 보일 수도 있다. 즉, 화면에 보이는 이미지 크기에 일관성이 없어지는 것이고, 문제가 될 것이다.
       
       이러한 문제를 해결하기 위해 안드로이드에서는 픽셀 대신 dp를 단위로 하여 이미지를 지정한다 
       
    -> dp는 dip라고도 하며, Density-Independent Pixel의 약자이다.
    -> "밀도에 독립적인 픽셀" 이라는 뜻이다. 픽셀은 밀도에 독립적이지 못하다고 볼 수 있는데, 픽셀이 촘촘한 경우와 그렇지 않은 경우 이미지의 크기가 
       다르게 표시되기 때문이다. 반면, dp가 밀도에 독립적이라는 것은 해상되에 관계 없이 이미지를 같은 비율로 표현한다는 의미가 된다.
       
    -> 그렇다면 dp는 어떻게 해서 해상도에 관계 없이 동일한 비율로 표시되는가?
    >> dp는 160dpi를 갖는 화면에서 하나의 픽셀과 대응한다. (기준)
    >> 160dpi는 보통 320*480 크기의 해상도를 가지는 3.6인치 스크린을 말하는데, 1인치당 160개의 픽셀을 가지고 있다는 뜻이다.
    >> 160dpi 해상도에서 1dp는 1pixel이다. 그리고 160dpi 해상도를 기준으로, 화면의 해상도에 따라 1dp가 나타내는 픽셀의 수는 달라진다. 
    
    >>160dpi 해상도를 갖는 화면에서 1dp = 1pixel 이다.
      240dpi 해상도를 갖는 화면에서 1dp = 1.5pixel 이다. / 160dpi : 240dpi = 1pixel : 1.5pixel 
      320dpi 해상도를 갖는 화면에서 1dp = 2pixel 이다.  /  160dpi : 320dpi = 1pixel : 2pixel 
      480dpi 해상도를 갖는 화면에서 1dp = 3pixel 이다. /  160dpi : 480dpi = 1pixel : 3pixel 
      
    >>640dpi 해상도를 갖는 화면에서 1dp는 ? 4pixel에 해당하는 애라고 생각하면 되겠다.
    
    -> 그림을 표현할 때, dp(정사각형)단위로 계산해서 넣으면, 160dpi에서 3pixel length * 3pixel length 에 해당하는 넓이, 즉 9pixel에 해당하는 크기를
       640dpi에 해당하는 해상도로 넣는다고 가정해 보자. 그렇다면 어차피 같은 dp 단위로 계산이 들어갈 것이니 3dp length * 3dp length에 해당하는 크기로 
       집어넣을 것이다. pixel 로 변환하면 9dp = 36pixel 로 바뀔 것이지만, 스마트폰 화면에서는 똑같은 "크기" 로 구현할 수 있다. 
       
    -> 정리하자면, 안드로이드에서는 화면의 크기에 관계없이 이미지의 비율을 동일하게 만들고자 픽셀 대신 dp 개념을 적용한다. dp는 "해상도에 독립적" 이기 때문이다.
       160dpi를 기준 해상도로 정하고, 화면 해상도에 따라서 1dp가 표한하는 픽셀의 수는 다르게 나타난다. 따라서 dp단위로 표현된 이미지는 해상도가 달라도 그 비율을
       동일하게 유지시킬 수 있다. 
